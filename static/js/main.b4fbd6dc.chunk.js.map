{"version":3,"sources":["foundation/randomNoteGenerator.js","screens/NotesInRandomOrder.js","foundation/flashCards.js","screens/FlashCards.js","App.js","serviceWorker.js","index.js"],"names":["_","require","WHITE_KEYS","BLACK_KEYS","concat","randomNotes","shuffle","NotesInRandomOrder","props","state","notes","this","isHidden","className","onClick","setState","map","note","index","key","React","Component","randomCard","sample","entries","flashCards","flatMap","cardValues","front","back","FlashCards","card","console","log","App","screenNames","currentScreen","nameOfScreen","Button","variant","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"ybAMMA,G,YAAIC,EAAQ,IAEZC,EAAa,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAG5CC,EAFQ,CAAC,KAAM,KAAM,KAAM,KAAM,MAEdC,OADV,CAAC,KAAM,KAAM,KAAM,KAAM,OAGxC,SAASC,IACP,OAAOL,EAAEM,QAAQJ,EAAWE,OAAOD,ICV9B,IAAMI,EAAb,kDACE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAOL,KAHQ,EADrB,qDAQY,IAAD,OACP,OAAIM,KAAKH,MAAMI,SACN,KAIP,yBAAKC,UAAU,sBACb,yBACEA,UAAU,OACVC,QAAS,WACP,EAAKC,SAAS,CAAEL,MAAOL,QAGxBM,KAAKF,MAAMC,MAAMM,KAAI,SAACC,EAAMC,GAAP,OACpB,yBAAKL,UAAU,OAAOM,IAAKD,GACzB,2BAAID,aAvBlB,GAAwCG,IAAMC,W,OCHxCrB,EAAIC,EAAQ,GAiBlB,SAASqB,IACP,OAAOtB,EAAEuB,OAfFvB,EAAEwB,QAAQC,GAAYC,SAAQ,SAAUC,GAC7C,MAAO,CACL,CACEC,MAAOD,EAAW,GAClBE,KAAMF,EAAW,IAEnB,CACEC,MAAOD,EAAW,GAClBE,KAAMF,EAAW,S,UCRZG,EAAb,kDACE,WAAYtB,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXsB,KAAMT,KAHS,EADrB,qDASI,OAAIX,KAAKH,MAAMI,SACN,KAIP,yBAAKC,UAAU,QACb,yBACEC,QAAS,WACPkB,QAAQC,IAAI,QAGbtB,KAAKF,MAAMsB,KAAKH,YApB3B,GAAgCR,IAAMC,WC2CvBa,E,kDAtCb,WAAY1B,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACX0B,YAAa,CAAC,QAAS,eACvBC,cAAe,SAJA,E,qDAQT,IAAD,OAGP,OAFAJ,QAAQC,IAAI,cACZD,QAAQC,IAAItB,KAAKF,MAAM2B,eAErB,yBAAKvB,UAAU,WACb,4BAAQA,UAAU,eAAlB,SACA,0BAAMA,UAAU,aACd,kBAAC,EAAD,CAAoBD,SAAuC,UAA7BD,KAAKF,MAAM2B,gBACzC,kBAAC,EAAD,CAAYxB,SAAuC,gBAA7BD,KAAKF,MAAM2B,iBAEnC,4BAAQvB,UAAU,eAChB,yBAAKA,UAAU,UACZF,KAAKF,MAAM0B,YAAYnB,KAAI,SAACqB,EAAcnB,GAAf,OAC1B,kBAACoB,EAAA,EAAD,CACEC,QAAQ,OACRzB,QAAS,WACP,EAAKC,SAAS,CAAEqB,cAAeC,KAEjClB,IAAKD,GAEJmB,a,GA7BCjB,IAAMC,WCIJmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.b4fbd6dc.chunk.js","sourcesContent":["// One of twelve, plus enharmonics. [Note]\n// A note belongs to many chords. [Chord]\n// A note is relative to another note. [Interval]\n// Number of chords suggested by 1, 2, 3 (...) notes within the system.\n// [Key]\n\nconst _ = require(\"lodash\");\n\nconst WHITE_KEYS = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"];\nconst FLATS = [\"Bb\", \"Eb\", \"Ab\", \"Db\", \"Gb\"];\nconst SHARPS = [\"C#\", \"D#\", \"F#\", \"G#\", \"A#\"];\nconst BLACK_KEYS = FLATS.concat(SHARPS);\n\nfunction randomNotes() {\n  return _.shuffle(WHITE_KEYS.concat(BLACK_KEYS));\n}\n\nexport { WHITE_KEYS, BLACK_KEYS, randomNotes };\n","import React from \"react\";\nimport \"./NotesInRandomOrder.css\";\nimport { randomNotes } from \"../foundation/randomNoteGenerator.js\";\n\nexport class NotesInRandomOrder extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      notes: randomNotes(),\n    };\n  }\n\n  render() {\n    if (this.props.isHidden) {\n      return null;\n    }\n\n    return (\n      <div className=\"NotesInRandomOrder\">\n        <div\n          className=\"grid\"\n          onClick={() => {\n            this.setState({ notes: randomNotes() });\n          }}\n        >\n          {this.state.notes.map((note, index) => (\n            <div className=\"cell\" key={index}>\n              <p>{note}</p>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n","import flashCards from \"./flashCards/polychordFractions.json\";\nconst _ = require(\"lodash\");\n\nfunction cards() {\n  return _.entries(flashCards).flatMap(function (cardValues) {\n    return [\n      {\n        front: cardValues[0],\n        back: cardValues[1],\n      },\n      {\n        front: cardValues[1],\n        back: cardValues[0],\n      },\n    ];\n  });\n}\n\nfunction randomCard() {\n  return _.sample(cards())\n}\n\nexport { cards, randomCard };\n","import React from \"react\";\nimport { randomCard } from \"../foundation/flashCards.js\";\nimport \"./FlashCards.css\";\n\nexport class FlashCards extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      card: randomCard(),\n    };\n  }\n\n  render() {\n    if (this.props.isHidden) {\n      return null;\n    }\n\n    return (\n      <div className=\"card\">\n        <div\n          onClick={() => {\n            console.log(\"hi\");\n          }}\n        >\n          {this.state.card.front}\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Button from \"react-bootstrap/Button\";\n\nimport \"./App.css\";\nimport { NotesInRandomOrder } from \"./screens/NotesInRandomOrder.js\";\nimport { FlashCards } from \"./screens/FlashCards.js\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      screenNames: [\"Notes\", \"Flash Cards\"],\n      currentScreen: \"Notes\",\n    };\n  }\n\n  render() {\n    console.log('render app')\n    console.log(this.state.currentScreen);\n    return (\n      <div className=\"wrapper\">\n        <header className=\"page-header\">Music</header>\n        <main className=\"page-main\">\n          <NotesInRandomOrder isHidden={this.state.currentScreen !== \"Notes\"} />\n          <FlashCards isHidden={this.state.currentScreen !== \"Flash Cards\"} />\n        </main>\n        <footer className=\"page-footer\">\n          <div className=\"Footer\">\n            {this.state.screenNames.map((nameOfScreen, index) => (\n              <Button\n                variant=\"dark\"\n                onClick={() => {\n                  this.setState({ currentScreen: nameOfScreen });\n                }}\n                key={index}\n              >\n                {nameOfScreen}\n              </Button>\n            ))}\n          </div>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}