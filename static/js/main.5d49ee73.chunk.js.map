{"version":3,"sources":["foundation/constants.js","foundation/randomNoteGenerator.js","screens/NotesInRandomOrder.js","foundation/flashCards/polychordFractions.js","foundation/intervals.js","foundation/flashCards/thirdsAndSevenths.js","foundation/flashCards.js","screens/FlashCards.js","App.js","serviceWorker.js","index.js"],"names":["WHITE_KEYS","FLATS","SHARPS","_","require","randomNotes","accidental","black_keys","sample","shuffle","concat","NotesInRandomOrder","props","state","notes","this","isHidden","className","onClick","setState","map","note","index","key","React","Component","NOTES_FIFTH_ABOVE","A","B","C","D","E","F","G","Bb","Eb","Ab","Db","Gb","NOTES_MAJOR_THIRD_ABOVE","NOTES_MINOR_THIRD_ABOVE","NOTES_MINOR_SEVENTH_ABOVE","NOTES_MAJOR_SEVENTH_ABOVE","noteAbove","interval","cards","typeOfChord","intervals","Error","front","back","thirdsAndSevenths","deck","entries","flashCards","cardValues","thirdSeventhCards","randomCard","previousCard","allCards","card","isEqual","CARD_COLORS_BY_SIDE","decks","FlashCards","nextCardSide","side","Object","keys","Button","variant","showRandomCard","last","flipCard","style","backgroundColor","App","screenNames","currentScreen","console","log","nameOfScreen","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5d49ee73.chunk.js","sourcesContent":["const WHITE_KEYS = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"];\nconst FLATS = [\"Bb\", \"Eb\", \"Ab\", \"Db\", \"Gb\"];\nconst SHARPS = [\"C#\", \"D#\", \"F#\", \"G#\", \"A#\"];\n\nexport { WHITE_KEYS, FLATS, SHARPS };\n","// One of twelve, plus enharmonics. [Note]\n// A note belongs to many chords. [Chord]\n// A note is relative to another note. [Interval]\n// Number of chords suggested by 1, 2, 3 (...) notes within the system.\n// [Key]\n\nimport { WHITE_KEYS, FLATS, SHARPS } from \"./constants.js\";\n\nconst _ = require(\"lodash\");\n\nfunction randomNotes(accidental) {\n  let black_keys;\n  if (accidental === \"b\") {\n    black_keys = FLATS;\n  } else if (accidental === \"#\") {\n    black_keys = SHARPS;\n  } else {\n    black_keys = _.sample([FLATS, SHARPS]);\n  }\n  return _.shuffle(WHITE_KEYS.concat(black_keys));\n}\n\nexport { randomNotes };\n","import React from \"react\";\nimport \"./NotesInRandomOrder.css\";\nimport { randomNotes } from \"../foundation/randomNoteGenerator.js\";\n\nexport class NotesInRandomOrder extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      notes: randomNotes(),\n    };\n  }\n\n  render() {\n    if (this.props.isHidden) {\n      return null;\n    }\n\n    return (\n      <div className=\"NotesInRandomOrder\">\n        <div\n          className=\"grid\"\n          onClick={() => {\n            this.setState({ notes: randomNotes() });\n          }}\n        >\n          {this.state.notes.map((note, index) => (\n            <div className=\"cell\" key={index}>\n              {note}\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n","import flashCards from \"./polychordFractions.json\";\nconst _ = require(\"lodash\");\n\nfunction cards() {\n  return _.entries(flashCards).map(function (cardValues) {\n    return {\n      front: cardValues[0],\n      back: cardValues[1],\n    };\n  });\n}\n\nexport { cards };\n","// One of twelve, plus enharmonics. [Note]\n// A note belongs to many chords. [Chord]\n// A note is relative to another note. [Interval]\n// Number of chords suggested by 1, 2, 3 (...) notes within the system.\n// [Key]\n\nconst NOTES_FIFTH_ABOVE = {\n  // White keys\n  A: \"E\",\n  B: \"F#\",\n  C: \"G\",\n  D: \"A\",\n  E: \"B\",\n  F: \"C\",\n  G: \"D\",\n  // Sharps\n  \"A#\": \"E#\",\n  \"C#\": \"G#\",\n  \"D#\": \"A#\",\n  \"F#\": \"C#\",\n  \"G#\": \"D#\",\n  // Flats\n  Bb: \"F\",\n  Eb: \"Bb\",\n  Ab: \"Eb\",\n  Db: \"Ab\",\n  Gb: \"Db\",\n};\n\nconst NOTES_MAJOR_THIRD_ABOVE = {\n  // White keys\n  A: \"C#\",\n  B: \"D#\",\n  C: \"E\",\n  D: \"F#\",\n  E: \"G#\",\n  F: \"A\",\n  G: \"B\",\n  // Sharps\n  \"A#\": \"C##\",\n  \"C#\": \"E#\",\n  \"D#\": \"F##\",\n  \"F#\": \"A#\",\n  \"G#\": \"B#\",\n  // Flats\n  Bb: \"D\",\n  Eb: \"G\",\n  Ab: \"C\",\n  Db: \"F\",\n  Gb: \"Bb\",\n};\n\nconst NOTES_MINOR_THIRD_ABOVE = {\n  // White keys\n  A: \"C\",\n  B: \"D\",\n  C: \"Eb\",\n  D: \"F\",\n  E: \"G\",\n  F: \"Ab\",\n  G: \"Bb\",\n  // Sharps\n  \"A#\": \"C#\",\n  \"C#\": \"E\",\n  \"D#\": \"F#\",\n  \"F#\": \"A\",\n  \"G#\": \"B\",\n  // Flats\n  Bb: \"Db\",\n  Eb: \"Gb\",\n  Ab: \"Cb\",\n  Db: \"Fb\",\n  Gb: \"Bbb\",\n};\n\nconst NOTES_MINOR_SEVENTH_ABOVE = {\n  // White keys\n  A: \"G\",\n  B: \"A\",\n  C: \"Bb\",\n  D: \"C\",\n  E: \"D\",\n  F: \"Eb\",\n  G: \"F\",\n  // Sharps\n  \"A#\": \"G#\",\n  \"C#\": \"B\",\n  \"D#\": \"C#\",\n  \"F#\": \"E\",\n  \"G#\": \"F#\",\n  // Flats\n  Bb: \"Ab\",\n  Eb: \"Db\",\n  Ab: \"Gb\",\n  Db: \"Cb\",\n  Gb: \"Fb\",\n};\n\nconst NOTES_MAJOR_SEVENTH_ABOVE = {\n  // White keys\n  A: \"G#\",\n  B: \"A#\",\n  C: \"B\",\n  D: \"C#\",\n  E: \"D#\",\n  F: \"E\",\n  G: \"F#\",\n  // Sharps\n  \"A#\": \"G##\",\n  \"C#\": \"B#\",\n  \"D#\": \"C##\",\n  \"F#\": \"E#\",\n  \"G#\": \"F##\",\n  // Flats\n  Bb: \"A\",\n  Eb: \"D\",\n  Ab: \"G\",\n  Db: \"C\",\n  Gb: \"F\",\n};\n\nfunction noteAbove(note, interval) {\n  if (interval === \"P5\") {\n    return NOTES_FIFTH_ABOVE[note];\n  } else if (interval === \"M3\") {\n    return NOTES_MAJOR_THIRD_ABOVE[note];\n  } else if (interval === \"m3\") {\n    return NOTES_MINOR_THIRD_ABOVE[note];\n  } else if (interval === \"m7\") {\n    return NOTES_MINOR_SEVENTH_ABOVE[note];\n  } else if (interval === \"M7\") {\n    return NOTES_MAJOR_SEVENTH_ABOVE[note];\n  }\n}\nexport { noteAbove };\n","import { noteAbove } from \"../intervals.js\";\nimport { WHITE_KEYS, SHARPS, FLATS } from \"../constants.js\";\n\nfunction thirdsAndSevenths(intervals) {\n  return WHITE_KEYS.concat(SHARPS)\n    .concat(FLATS)\n    .map(function (note) {\n      return {\n        front: note,\n        back: `${noteAbove(note, intervals[0])},${noteAbove(\n          note,\n          intervals[1]\n        )}`,\n      };\n    });\n}\n\nfunction cards(typeOfChord) {\n  let intervals;\n  switch (typeOfChord) {\n    case \"△\":\n      intervals = [\"M3\", \"M7\"];\n      break;\n    case \"7\":\n      intervals = [\"M3\", \"m7\"];\n      break;\n    case \"m7\":\n      intervals = [\"m3\", \"m7\"];\n      break;\n    default:\n      throw new Error(`not implemented for typeOfChord=${typeOfChord}`);\n  }\n\n  return thirdsAndSevenths(intervals);\n}\nexport { cards };\n","import { cards as pcCards } from \"./flashCards/polychordFractions.js\";\nimport { cards as thirdSeventhCards } from \"./flashCards/thirdsAndSevenths.js\";\nconst _ = require(\"lodash\");\n\nfunction cards(deck) {\n  switch (deck[0]) {\n    case \"polychordFractions\":\n      return pcCards();\n    case \"seventhsAndThirds\":\n      return thirdSeventhCards(deck[1]);\n    default:\n      throw new Error(`not implemented for deck=${deck}`);\n  }\n}\n\nfunction randomCard(deck, previousCard) {\n  let allCards = cards(deck);\n\n  while (true) {\n    let card = _.sample(allCards);\n\n    if (!_.isEqual(card, previousCard)) {\n      return card;\n    }\n  }\n}\n\nexport { cards, randomCard };\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport { randomCard } from \"../foundation/flashCards.js\";\nimport \"./FlashCards.css\";\n\nconst _ = require(\"lodash\");\n\nconst CARD_COLORS_BY_SIDE = {\n  front: \"blue\",\n  back: \"green\",\n};\n\nconst decks = [\n  [\"polychordFractions\"],\n  [\"seventhsAndThirds\", \"△\"],\n  [\"seventhsAndThirds\", \"7\"],\n  [\"seventhsAndThirds\", \"m7\"],\n];\n\nexport class FlashCards extends React.Component {\n  constructor(props) {\n    super(props);\n    let deck = _.sample(decks);\n    this.state = {\n      nextCardSide: \"front\",\n      card: randomCard(deck),\n      // Only need this to highlight button for current deck.\n      deck: deck,\n      side: \"front\",\n    };\n  }\n\n  flipCard() {\n    this.setState({\n      side: this.state.side === \"front\" ? \"back\" : \"front\",\n    });\n  }\n\n  showRandomCard(deck) {\n    this.setState({\n      card: randomCard(deck, this.state.card),\n      side: this.state.nextCardSide,\n    });\n  }\n\n  render() {\n    if (this.props.isHidden) {\n      return null;\n    }\n\n    return (\n      <div className=\"FlashCards\">\n        <div className=\"buttons\">\n          {Object.keys(CARD_COLORS_BY_SIDE).map((side, index) => (\n            <Button\n              variant=\"dark\"\n              onClick={() => {\n                this.setState({ nextCardSide: side });\n              }}\n              key={index}\n            >\n              Next: {side}\n            </Button>\n          ))}\n          {decks.map((deck, index) => (\n            <Button\n              variant={_.isEqual(this.state.deck, deck) ? \"success\" : \"dark\"}\n              onClick={() => {\n                this.showRandomCard(deck);\n              }}\n              key={index}\n            >\n              {_.last(deck)}\n            </Button>\n          ))}\n        </div>\n        <div\n          className=\"card\"\n          onClick={() => this.flipCard()}\n          style={{\n            backgroundColor: CARD_COLORS_BY_SIDE[this.state.side],\n          }}\n        >\n          {this.state.card[this.state.side]}\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Button from \"react-bootstrap/Button\";\n\nimport \"./App.css\";\nimport { NotesInRandomOrder } from \"./screens/NotesInRandomOrder.js\";\nimport { FlashCards } from \"./screens/FlashCards.js\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      screenNames: [\"Notes\", \"Flash Cards\"],\n      currentScreen: \"Notes\",\n    };\n  }\n\n  render() {\n    console.log(this.state.currentScreen);\n    return (\n      <div className=\"wrapper\">\n        <header className=\"page-header\">Music</header>\n        <main className=\"page-main\">\n          <NotesInRandomOrder isHidden={this.state.currentScreen !== \"Notes\"} />\n          <FlashCards isHidden={this.state.currentScreen !== \"Flash Cards\"} />\n        </main>\n        <footer className=\"page-footer\">\n          <div className=\"Footer\">\n            {this.state.screenNames.map((nameOfScreen, index) => (\n              <Button\n                variant=\"dark\"\n                onClick={() => {\n                  this.setState({ currentScreen: nameOfScreen });\n                }}\n                key={index}\n              >\n                {nameOfScreen}\n              </Button>\n            ))}\n          </div>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}